[include]
    path = .gitconfig.local
[core]
	editor = vim
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore
    autocrlf = input
    safecrlf = true
[color]
	ui = auto
	# interactive = auto
    [color "branch"]
        current = yellow reverse
        local = yellow
        remote = green
    [color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red bold
        new = green bold
        whitespace = red reverse
    [color "status"]
        added = yellow
        changed = green
        untracked = red
[merge]
	# tool = opendiff
	tool = diff3
[diff]
	# tool = opendiff
	tool = diff3
[difftool]
	prompt = false
[mergetool]
	prompt = false

[url "https://github.com/"]
    insteadOf = gh:
[url "https://gist.github.com/"]
    insteadOf = gist:
[url "https://bitbucket.org/"]
    insteadOf = bb:

[alias]
    ci = commit
    co = checkout
    st = status --column
    sts = status -s

    # from http://michaelwales.com/articles/make-gitconfig-work-for-you/
    # Show all of my configured aliases
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort

    # For when you made that commit a bit too early, amend
    amend = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend

    # Save a repo as a tarball
    export = archive -o latest.tar.gz -9 --prefix=latest/

    # View a pretty git log with branch tree
    g = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

   # Thin out older metadata within the repository, reduceses filesystem footprint
    trim = !git reflog expire --expire=now --all && git gc --prune=now 

    in = pull --dry-run
    r = !git ls-files -z --deleted | xargs -0 git rm


    # from http://haacked.com/archive/2014/07/28/github-flow-aliases/
    # rebase any local commits to be after pulled commits
    # then remove remote-tracking branches no longer existing on remote
    up = git pull --rebase --prune

    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = commit -am "WIP"
    undo = reset HEAD~1 --mixed
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
